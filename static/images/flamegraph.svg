<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" onload="init(evt)" version="1.1" viewBox="0 0 1900 582"><defs><linearGradient id="background" x1="0" x2="0" y1="0" y2="1"><stop offset="5%" stop-color="#eee"/><stop offset="95%" stop-color="#eeeeb0"/></linearGradient></defs><style type="text/css">text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); } #search, #ignorecase { opacity:0.1; cursor:pointer; } #search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; } #subtitle { text-anchor:middle; font-color:rgb(160,160,160); } #title { text-anchor:middle; font-size:17px} #unzoom { cursor:pointer; } #frames &gt; *:hover { stroke:black; stroke-width:0.5; cursor:pointer; } #frames &gt; .highlight { stroke:black; stroke-width:0.5; cursor:pointer; } .hide { display:none; } .parent { opacity:0.5; }</style><script type="text/ecmascript"><![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "CPU " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]></script><rect width="1900" height="582" x="0" y="0" fill="url(#background)"/><text id="title" x="950" y="24">Query with JSONExtractString flamegraph</text><text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text><text id="search" x="1790" y="24">Search</text><text id="ignorecase" x="1874" y="24">ic</text><g id="frames"><g class="highlight"><title>DB::FunctionJSON&lt;DB::NameJSONExtractRaw, DB::JSONExtractRawImpl&gt;::executeImpl(std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt; const&amp;, std::__1::shared_ptr&lt;DB::IDataType const&gt; const&amp;, unsigned long) const#/usr/bin/clickhouse (1,400 samples, 68.16%)</title><rect width="1281.4" height="15" x="111.6" y="277" fill="#E52100" rx="2" ry="2"/><text x="114.6" y="287.5">DB::FunctionJSON&lt;DB::NameJSONExtractRaw, DB::JSONExtractRawImpl&gt;::executeImpl(std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt; const&amp;,..</text></g><g><title># (11 samples, 0.54%)</title><rect width="10.1" height="15" x="29.2" y="437" fill="#D3B330" rx="2" ry="2"/></g><g><title>__madvise#/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.05%)</title><rect width=".9" height="15" x="1396.7" y="117" fill="#D79C0A" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (11 samples, 0.54%)</title><rect width="10.1" height="15" x="1771" y="117" fill="#CF050F" rx="2" ry="2"/></g><g><title>DB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic&lt;bool&gt;*)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1873.5" y="437" fill="#CDD014" rx="2" ry="2"/></g><g><title>__madvise#/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.05%)</title><rect width=".9" height="15" x="49.4" y="133" fill="#CF8433" rx="2" ry="2"/></g><g><title>DB::NativeBlockInputStream::readImpl()#/usr/bin/clickhouse (3 samples, 0.15%)</title><rect width="2.8" height="15" x="1879.9" y="405" fill="#FD8A30" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="10.9" y="85" fill="#DE3520" rx="2" ry="2"/></g><g><title>CityHash_v1_0_2::CityHash128WithSeed(char const*, unsigned long, std::__1::pair&lt;unsigned long, unsigned long&gt;)#/usr/bin/clickhouse (2 samples, 0.10%)</title><rect width="1.8" height="15" x="1781.1" y="101" fill="#F1AD18" rx="2" ry="2"/></g><g><title>Allocator&lt;false, false&gt;::allocNoTrack(unsigned long, unsigned long)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1404.9" y="245" fill="#D95A18" rx="2" ry="2"/></g><g><title>DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt; const&amp;, std::__1::shared_ptr&lt;DB::IDataType const&gt; const&amp;, unsigned long, bool) const#/usr/bin/clickhouse (1,701 samples, 82.81%)</title><rect width="1556.9" height="15" x="57.6" y="309" fill="#FA000F" rx="2" ry="2"/><text x="60.59" y="319.5">DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt; const&amp;, std::__1::shared_ptr&lt;DB::IDataType const&gt; const&amp;, unsig..</text></g><g><title>DB::ReplaceRegexpImpl&lt;false&gt;::processString(re2_st::StringPiece const&amp;, DB::PODArray&lt;char8_t, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt;&amp;, unsigned long&amp;, re2_st::RE2&amp;, int, std::__1::vector&lt;std::__1::pair&lt;int, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;int, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt; &gt; const&amp;)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="10.9" y="309" fill="#EC771C" rx="2" ry="2"/></g><g><title># (11 samples, 0.54%)</title><rect width="10.1" height="15" x="29.2" y="421" fill="#D94E05" rx="2" ry="2"/></g><g><title>DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt; const&amp;, std::__1::shared_ptr&lt;DB::IDataType const&gt; const&amp;, unsigned long) const#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width="1" height="15" x="1857" y="181" fill="#DF401C" rx="2" ry="2"/></g><g><title>__libc_realloc#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="51.2" y="309" fill="#F38005" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1873.5" y="485" fill="#EB4C21" rx="2" ry="2"/></g><g><title># (1 samples, 0.05%)</title><rect width=".9" height="15" x="1878.1" y="373" fill="#F22D13" rx="2" ry="2"/></g><g><title>tcache_alloc_small_hard#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="208.6" y="213" fill="#E81409" rx="2" ry="2"/></g><g><title>malloc_default#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="86.9" y="213" fill="#E51518" rx="2" ry="2"/></g><g><title>DB::MergeTreeReaderWide::readData(DB::NameAndTypePair const&amp;, COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;&amp;, unsigned long, bool, unsigned long, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; &gt; &gt; &gt;&amp;)#/usr/bin/clickhouse (144 samples, 7.01%)</title><rect width="131.8" height="15" x="1724.3" y="229" fill="#E31623" rx="2" ry="2"/><text x="1727.33" y="239.5">DB::MergeTreeRea..</text></g><g><title>#/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.05%)</title><rect width=".9" height="15" x="53.9" y="325" fill="#FB5C1F" rx="2" ry="2"/></g><g><title>DB::MergeTreeRangeReader::executePrewhereActionsAndFilterColumns(DB::MergeTreeRangeReader::ReadResult&amp;)#/usr/bin/clickhouse (2 samples, 0.10%)</title><rect width="1.9" height="15" x="1856.1" y="261" fill="#F88E00" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1614.5" y="181" fill="#CF552A" rx="2" ry="2"/></g><g><title>tcache_alloc_small_hard#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1614.5" y="245" fill="#EB7A1C" rx="2" ry="2"/></g><g><title>malloc_default#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1404.9" y="229" fill="#EAD92E" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (2 samples, 0.10%)</title><rect width="1.8" height="15" x="1619.1" y="325" fill="#D1850D" rx="2" ry="2"/></g><g><title>#/usr/lib/x86_64-linux-gnu/libc-2.31.so (10 samples, 0.49%)</title><rect width="9.1" height="15" x="194.9" y="229" fill="#D7E11B" rx="2" ry="2"/></g><g><title>re2_st::Compiler::Finish(re2_st::Regexp*)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="10.9" y="213" fill="#EA6817" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (4 samples, 0.19%)</title><rect width="3.7" height="15" x="1393" y="261" fill="#D3681E" rx="2" ry="2"/></g><g><title>arena_tcache_fill_small#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="208.6" y="197" fill="#D97233" rx="2" ry="2"/></g><g><title>DB::MergeTreeBaseSelectProcessor::readFromPartImpl()#/usr/bin/clickhouse (146 samples, 7.11%)</title><rect width="133.7" height="15" x="1724.3" y="309" fill="#F98B1E" rx="2" ry="2"/><text x="1727.33" y="319.5">DB::MergeTreeBas..</text></g><g><title>re2_st::DFA::WorkqToCachedState(re2_st::DFA::Workq*, re2_st::DFA::Workq*, unsigned int)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="82.3" y="149" fill="#F7180E" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1614.5" y="293" fill="#DC8536" rx="2" ry="2"/></g><g><title>DB::ISource::work()#/usr/bin/clickhouse (146 samples, 7.11%)</title><rect width="133.7" height="15" x="1724.3" y="373" fill="#E0D02C" rx="2" ry="2"/><text x="1727.33" y="383.5">DB::ISource::wor..</text></g><g><title>Poco::Net::SocketImpl::pollImpl(Poco::Timespan&amp;, int)#/usr/bin/clickhouse (6 samples, 0.29%)</title><rect width="5.5" height="15" x="1882.7" y="373" fill="#EF7A23" rx="2" ry="2"/></g><g><title>LZ4::decompress(char const*, char*, unsigned long, unsigned long, LZ4::PerformanceStatistics&amp;)#/usr/bin/clickhouse (46 samples, 2.24%)</title><rect width="42.1" height="15" x="1787.5" y="117" fill="#D32319" rx="2" ry="2"/><text x="1790.49" y="127.5">LZ4..</text></g><g><title>large_dalloc#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width="1" height="15" x="54.8" y="277" fill="#E1BC32" rx="2" ry="2"/></g><g><title>DB::FunctionComparison&lt;DB::EqualsOp, DB::NameEquals&gt;::executeImpl(std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt; const&amp;, std::__1::shared_ptr&lt;DB::IDataType const&gt; const&amp;, unsigned long) const#/usr/bin/clickhouse (2 samples, 0.10%)</title><rect width="1.8" height="15" x="106.1" y="277" fill="#E0361C" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1396.7" y="133" fill="#D47006" rx="2" ry="2"/></g><g><title>Allocator&lt;true, true&gt;::allocNoTrack(unsigned long, unsigned long)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="45.7" y="325" fill="#F18E12" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1396.7" y="165" fill="#FB970A" rx="2" ry="2"/></g><g><title>DB::ExpressionActions::execute(DB::Block&amp;, bool) const#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width="1" height="15" x="1857" y="245" fill="#F4C216" rx="2" ry="2"/></g><g><title>__madvise#/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.05%)</title><rect width="1" height="15" x="54.8" y="181" fill="#CD0620" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1,980 samples, 96.40%)</title><rect width="1812.3" height="15" x="45.7" y="437" fill="#D0A00A" rx="2" ry="2"/><text x="48.7" y="447.5">#/usr/bin/clickhouse</text></g><g><title>bool DB::FunctionJSONHelpers::performMoves&lt;DB::SimdJSONParser&gt;(std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt; const&amp;, unsigned long, DB::SimdJSONParser::Element const&amp;, std::__1::vector&lt;DB::FunctionJSONHelpers::Move, std::__1::allocator&lt;DB::FunctionJSONHelpers::Move&gt; &gt; const&amp;, DB::SimdJSONParser::Element&amp;, std::__1::basic_string_view&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;)#/usr/bin/clickhouse (87 samples, 4.24%)</title><rect width="79.6" height="15" x="124.4" y="245" fill="#DD8A35" rx="2" ry="2"/><text x="127.41" y="255.5">bool DB::..</text></g><g><title>DB::FunctionsLogicalDetail::FunctionAnyArityLogical&lt;DB::FunctionsLogicalDetail::AndImpl, DB::NameAnd&gt;::executeImpl(std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt; const&amp;, std::__1::shared_ptr&lt;DB::IDataType const&gt; const&amp;, unsigned long) const#/usr/bin/clickhouse (5 samples, 0.24%)</title><rect width="4.6" height="15" x="1393" y="277" fill="#EE040F" rx="2" ry="2"/></g><g><title>DB::ReadBuffer::readStrict(char*, unsigned long)#/usr/bin/clickhouse (5 samples, 0.24%)</title><rect width="4.6" height="15" x="1782.9" y="117" fill="#D4632B" rx="2" ry="2"/></g><g><title>DB::CompressedReadBufferFromFile::nextImpl()#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1873.5" y="165" fill="#D29520" rx="2" ry="2"/></g><g><title>malloc_default#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1614.5" y="261" fill="#D9E302" rx="2" ry="2"/></g><g><title>DB::ReplaceRegexpImpl&lt;false&gt;::processString(re2_st::StringPiece const&amp;, DB::PODArray&lt;char8_t, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt;&amp;, unsigned long&amp;, re2_st::RE2&amp;, int, std::__1::vector&lt;std::__1::pair&lt;int, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;int, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt; &gt; const&amp;)#/usr/bin/clickhouse (23 samples, 1.12%)</title><rect width="21.1" height="15" x="64" y="245" fill="#F58B14" rx="2" ry="2"/></g><g><title>DB::Memory&lt;Allocator&lt;false, false&gt; &gt;::alloc()#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1873.5" y="149" fill="#F8302F" rx="2" ry="2"/></g><g><title>re2_st::RE2::Init(re2_st::StringPiece const&amp;, re2_st::RE2::Options const&amp;)#/usr/bin/clickhouse (2 samples, 0.10%)</title><rect width="1.8" height="15" x="85.1" y="229" fill="#E55C20" rx="2" ry="2"/></g><g><title>arena_ralloc#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="51.2" y="293" fill="#D47E08" rx="2" ry="2"/></g><g><title>DB::ColumnVector&lt;char8_t&gt;::~ColumnVector()#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1396.7" y="261" fill="#FC972F" rx="2" ry="2"/></g><g><title># (1 samples, 0.05%)</title><rect width=".9" height="15" x="1873.5" y="37" fill="#EC0422" rx="2" ry="2"/></g><g><title>operator new(unsigned long)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="86" y="165" fill="#DE2B16" rx="2" ry="2"/></g><g><title>re2_st::Compiler::Compile(re2_st::Regexp*, bool, long)#/usr/bin/clickhouse (2 samples, 0.10%)</title><rect width="1.8" height="15" x="85.1" y="213" fill="#CF0026" rx="2" ry="2"/></g><g><title>DB::ColumnVector&lt;StrongTypedef&lt;wide::integer&lt;128ul, unsigned int&gt;, DB::UUIDTag&gt; &gt;::filter(DB::PODArray&lt;char8_t, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt; const&amp;, long) const#/usr/bin/clickhouse (2 samples, 0.10%)</title><rect width="1.8" height="15" x="52.1" y="341" fill="#EA7833" rx="2" ry="2"/></g><g><title>StackTrace::StackTrace()#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1873.5" y="101" fill="#D90F08" rx="2" ry="2"/></g><g><title>DB::Aggregator::executeOnBlock(std::__1::vector&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;, std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; &gt; &gt;, unsigned long, DB::AggregatedDataVariants&amp;, std::__1::vector&lt;DB::IColumn const*, std::__1::allocator&lt;DB::IColumn const*&gt; &gt;&amp;, std::__1::vector&lt;std::__1::vector&lt;DB::IColumn const*, std::__1::allocator&lt;DB::IColumn const*&gt; &gt;, std::__1::allocator&lt;std::__1::vector&lt;DB::IColumn const*, std::__1::allocator&lt;DB::IColumn const*&gt; &gt; &gt; &gt;&amp;, bool&amp;)#/usr/bin/clickhouse (4 samples, 0.19%)</title><rect width="3.7" height="15" x="46.6" y="357" fill="#F58205" rx="2" ry="2"/></g><g><title>DB::FunctionConvertFromString&lt;DB::DataTypeNumber&lt;double&gt;, DB::NameToFloat64OrNull, (DB::ConvertFromStringExceptionMode)2, (DB::ConvertFromStringParsingMode)0&gt;::executeImpl(std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt; const&amp;, std::__1::shared_ptr&lt;DB::IDataType const&gt; const&amp;, unsigned long) const#/usr/bin/clickhouse (4 samples, 0.19%)</title><rect width="3.7" height="15" x="107.9" y="277" fill="#E97303" rx="2" ry="2"/></g><g><title>CPU (2,054 samples, 100.00%)</title><rect width="1880" height="15" x="10" y="517" fill="#EF4612" rx="2" ry="2"/><text x="13" y="527.5">CPU</text></g><g><title>DB::RemoteQueryExecutorRoutine::operator()(boost::context::fiber&amp;&amp;) const#/usr/bin/clickhouse (12 samples, 0.58%)</title><rect width="11" height="15" x="1878.1" y="485" fill="#F2052F" rx="2" ry="2"/></g><g><title>DB::ColumnVector&lt;long&gt;::replicate(DB::PODArray&lt;unsigned long, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt; const&amp;) const#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1723.4" y="325" fill="#FB850A" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (6 samples, 0.29%)</title><rect width="5.5" height="15" x="1882.7" y="357" fill="#DD8929" rx="2" ry="2"/></g><g><title>re2_st::RE2::Match(re2_st::StringPiece const&amp;, unsigned long, unsigned long, re2_st::RE2::Anchor, re2_st::StringPiece*, int) const#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="10.9" y="293" fill="#FA891C" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="46.6" y="245" fill="#F9DF2D" rx="2" ry="2"/></g><g><title>DB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic&lt;bool&gt;*)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="10.9" y="485" fill="#D58833" rx="2" ry="2"/></g><g><title>tcache_bin_flush_large#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="86" y="117" fill="#FC4A1A" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1,980 samples, 96.40%)</title><rect width="1812.3" height="15" x="45.7" y="469" fill="#D4820A" rx="2" ry="2"/><text x="48.7" y="479.5">#/usr/bin/clickhouse</text></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="375.2" y="181" fill="#EF3114" rx="2" ry="2"/></g><g><title># (6 samples, 0.29%)</title><rect width="5.5" height="15" x="1882.7" y="277" fill="#DC8E36" rx="2" ry="2"/></g><g><title>StackTrace::StackTrace(ucontext_t const&amp;)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1878.1" y="437" fill="#DFE021" rx="2" ry="2"/></g><g><title>DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const#/usr/bin/clickhouse (46 samples, 2.24%)</title><rect width="42.1" height="15" x="1787.5" y="133" fill="#D25804" rx="2" ry="2"/><text x="1790.49" y="143.5">DB:..</text></g><g><title>DB::ColumnDecimal&lt;DB::DateTime64&gt;::replicate(DB::PODArray&lt;unsigned long, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt; const&amp;) const#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1620.9" y="325" fill="#E78C15" rx="2" ry="2"/></g><g><title>DB::Expected::add(DB::TokenIterator, char const*)#/usr/bin/clickhouse (3 samples, 0.15%)</title><rect width="2.8" height="15" x="1879.9" y="261" fill="#F0982F" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="10.9" y="53" fill="#D3231F" rx="2" ry="2"/></g><g><title>DB::JSONExtractRawImpl&lt;DB::SimdJSONParser&gt;::insertResultToColumn(DB::IColumn&amp;, DB::SimdJSONParser::Element const&amp;, std::__1::basic_string_view&lt;char, std::__1::char_traits&lt;char&gt; &gt; const&amp;)#/usr/bin/clickhouse (2 samples, 0.10%)</title><rect width="1.8" height="15" x="122.6" y="245" fill="#E8321C" rx="2" ry="2"/></g><g><title>DB::IBlockInputStream::read()#/usr/bin/clickhouse (4 samples, 0.19%)</title><rect width="3.7" height="15" x="1879" y="421" fill="#EE7413" rx="2" ry="2"/></g><g><title>DB::MergeTreeReaderWide::readData(DB::NameAndTypePair const&amp;, COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;&amp;, unsigned long, bool, unsigned long, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; &gt; &gt; &gt;&amp;)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1873.5" y="245" fill="#EB0B13" rx="2" ry="2"/></g><g><title>DB::VolnitskyBase&lt;true, true, DB::StringSearcher&lt;true, true&gt; &gt;::search(char8_t const*, unsigned long) const#/usr/bin/clickhouse (223 samples, 10.86%)</title><rect width="204.1" height="15" x="1408.6" y="245" fill="#F91E0A" rx="2" ry="2"/><text x="1411.56" y="255.5">DB::VolnitskyBase&lt;true, tr..</text></g><g><title>DB::MergeTreeRangeReader::read(unsigned long, std::__1::deque&lt;DB::MarkRange, std::__1::allocator&lt;DB::MarkRange&gt; &gt;&amp;)#/usr/bin/clickhouse (146 samples, 7.11%)</title><rect width="133.7" height="15" x="1724.3" y="293" fill="#D21619" rx="2" ry="2"/><text x="1727.33" y="303.5">DB::MergeTreeRan..</text></g><g><title>re2_st::Prog::Optimize()#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="86" y="181" fill="#E2802E" rx="2" ry="2"/></g><g><title>DB::ReadBufferFromFileDescriptor::nextImpl()#/usr/bin/clickhouse (5 samples, 0.24%)</title><rect width="4.6" height="15" x="1782.9" y="101" fill="#E67F03" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="86.9" y="149" fill="#CF7A2D" rx="2" ry="2"/></g><g><title>arena_ralloc#/usr/bin/clickhouse (28 samples, 1.36%)</title><rect width="25.6" height="15" x="1830.5" y="117" fill="#CEE31D" rx="2" ry="2"/><text x="1833.51" y="127.5">a..</text></g><g><title>extent_dalloc_wrapper#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="10.9" y="69" fill="#E3192D" rx="2" ry="2"/></g><g><title>DB::JoiningTransform::transform(DB::Chunk&amp;)#/usr/bin/clickhouse (115 samples, 5.60%)</title><rect width="105.2" height="15" x="1619.1" y="373" fill="#EFD12D" rx="2" ry="2"/><text x="1622.07" y="383.5">DB::JoiningT..</text></g><g><title>DB::SourceWithProgress::work()#/usr/bin/clickhouse (146 samples, 7.11%)</title><rect width="133.7" height="15" x="1724.3" y="389" fill="#FA220C" rx="2" ry="2"/><text x="1727.33" y="399.5">DB::SourceWithPr..</text></g><g><title>simdjson::haswell::dom_parser_implementation::parse(unsigned char const*, unsigned long, simdjson::dom::document&amp;)#/usr/bin/clickhouse (403 samples, 19.62%)</title><rect width="368.9" height="15" x="377" y="229" fill="#E79A2F" rx="2" ry="2"/><text x="380.03" y="239.5">simdjson::haswell::dom_parser_implementation::pars..</text></g><g><title>malloc_default#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="208.6" y="229" fill="#F10916" rx="2" ry="2"/></g><g><title>DB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic&lt;bool&gt;*)#/usr/bin/clickhouse (1,980 samples, 96.40%)</title><rect width="1812.3" height="15" x="45.7" y="421" fill="#E8BC2C" rx="2" ry="2"/><text x="48.7" y="431.5">DB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic&lt;bool&gt;*)#/usr/bin/clickhouse</text></g><g><title>large_dalloc#/usr/bin/clickhouse (2 samples, 0.10%)</title><rect width="1.8" height="15" x="374.3" y="213" fill="#E67934" rx="2" ry="2"/></g><g><title>read#/usr/lib/x86_64-linux-gnu/libpthread-2.31.so (1 samples, 0.05%)</title><rect width=".9" height="15" x="1770.1" y="101" fill="#D7791D" rx="2" ry="2"/></g><g><title>__libc_malloc#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="85.1" y="149" fill="#D01A17" rx="2" ry="2"/></g><g><title>bool re2_st::DFA::InlinedSearchLoop&lt;false, false, false&gt;(re2_st::DFA::SearchParams*)#/usr/bin/clickhouse (3 samples, 0.15%)</title><rect width="2.7" height="15" x="80.5" y="181" fill="#ECA236" rx="2" ry="2"/></g><g><title>DB::ExtractParamToStringImpl&lt;DB::ExtractRaw&gt;::vector(DB::PODArray&lt;char8_t, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt; const&amp;, DB::PODArray&lt;unsigned long, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, DB::PODArray&lt;char8_t, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt;&amp;, DB::PODArray&lt;unsigned long, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt;&amp;)#/usr/bin/clickhouse (232 samples, 11.30%)</title><rect width="212.3" height="15" x="1402.2" y="261" fill="#FE2424" rx="2" ry="2"/><text x="1405.15" y="271.5">DB::ExtractParamToStringImp..</text></g><g><title>DB::AggregatingTransform::initGenerate()#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="45.7" y="389" fill="#CD072E" rx="2" ry="2"/></g><g><title>DB::CompressedReadBufferFromFile::nextImpl()#/usr/bin/clickhouse (12 samples, 0.58%)</title><rect width="11" height="15" x="1770.1" y="165" fill="#F9B533" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="86.9" y="181" fill="#FC0907" rx="2" ry="2"/></g><g><title>__madvise#/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.05%)</title><rect width=".9" height="15" x="46.6" y="181" fill="#F8DC2D" rx="2" ry="2"/></g><g><title>StackTrace::StackTrace(ucontext_t const&amp;)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1860.7" y="453" fill="#F84C23" rx="2" ry="2"/></g><g><title>DB::MergeTreeReaderStream::seekToMark(unsigned long)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1873.5" y="197" fill="#E4C92E" rx="2" ry="2"/></g><g><title>void DB::Aggregator::executeImpl&lt;DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef, void&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef, void&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt; &gt;(DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef, void&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef, void&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt;&amp;, DB::Arena*, unsigned long, std::__1::vector&lt;DB::IColumn const*, std::__1::allocator&lt;DB::IColumn const*&gt; &gt;&amp;, DB::Aggregator::AggregateFunctionInstruction*, bool, char*) const#/usr/bin/clickhouse (3 samples, 0.15%)</title><rect width="2.8" height="15" x="47.5" y="341" fill="#D22E0A" rx="2" ry="2"/></g><g><title>DB::AggregatedDataVariants::convertToTwoLevel()#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="46.6" y="341" fill="#E19A25" rx="2" ry="2"/></g><g><title>#/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.05%)</title><rect width=".9" height="15" x="45.7" y="293" fill="#DAC517" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="10.9" y="469" fill="#D97C36" rx="2" ry="2"/></g><g><title>recv#/usr/lib/x86_64-linux-gnu/libpthread-2.31.so (1 samples, 0.05%)</title><rect width=".9" height="15" x="1888.2" y="389" fill="#D4581B" rx="2" ry="2"/></g><g><title>void DB::Aggregator::executeImplBatch&lt;false, DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef, void&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef, void&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt; &gt;(DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef, void&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef, void&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt;&amp;, DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef, void&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef, void&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt;::State&amp;, DB::Arena*, unsigned long, DB::Aggregator::AggregateFunctionInstruction*, char*) const#/usr/bin/clickhouse (3 samples, 0.15%)</title><rect width="2.8" height="15" x="47.5" y="325" fill="#D5B913" rx="2" ry="2"/></g><g><title>extent_dalloc_wrapper#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="374.3" y="149" fill="#DB2A06" rx="2" ry="2"/></g><g><title>DB::Block::getByName(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;) const#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1856.1" y="245" fill="#E3562A" rx="2" ry="2"/></g><g><title>void DB::HashJoin::joinBlockImpl&lt;(DB::ASTTableJoin::Kind)0, (DB::ASTTableJoin::Strictness)3, DB::HashJoin::MapsTemplate&lt;DB::RowRefList&gt; &gt;(DB::Block&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, DB::Block const&amp;, DB::HashJoin::MapsTemplate&lt;DB::RowRefList&gt; const&amp;, bool) const#/usr/bin/clickhouse (115 samples, 5.60%)</title><rect width="105.2" height="15" x="1619.1" y="341" fill="#DCC119" rx="2" ry="2"/><text x="1622.07" y="351.5">void DB::Has..</text></g><g><title>__madvise#/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.05%)</title><rect width=".9" height="15" x="1614.5" y="149" fill="#D82201" rx="2" ry="2"/></g><g><title>DB::parseQueryAndMovePosition(DB::IParser&amp;, char const*&amp;, char const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, bool, unsigned long, unsigned long)#/usr/bin/clickhouse (3 samples, 0.15%)</title><rect width="2.8" height="15" x="1879.9" y="373" fill="#FACF25" rx="2" ry="2"/></g><g><title>DB::ISource::work()#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1873.5" y="389" fill="#FEDC0A" rx="2" ry="2"/></g><g><title>__libc_realloc#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1719.8" y="293" fill="#E7C62F" rx="2" ry="2"/></g><g><title>Poco::Net::SocketImpl::receiveBytes(void*, int, int)#/usr/bin/clickhouse (7 samples, 0.34%)</title><rect width="6.4" height="15" x="1882.7" y="405" fill="#EA7D18" rx="2" ry="2"/></g><g><title>sallocx#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1613.6" y="229" fill="#FB5A08" rx="2" ry="2"/></g><g><title>__libc_realloc#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="49.4" y="277" fill="#FB8632" rx="2" ry="2"/></g><g><title>DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt; const&amp;, std::__1::shared_ptr&lt;DB::IDataType const&gt; const&amp;, unsigned long) const#/usr/bin/clickhouse (1,701 samples, 82.81%)</title><rect width="1556.9" height="15" x="57.6" y="293" fill="#EC3E0D" rx="2" ry="2"/><text x="60.59" y="303.5">DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt; const&amp;, std::__1::shared_ptr&lt;DB::IDataType const&gt; const&amp;, unsigned long..</text></g><g><title>DB::ReadBuffer::readStrict(char*, unsigned long)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1770.1" y="133" fill="#DFDA34" rx="2" ry="2"/></g><g><title>void DB::readVarUIntImpl&lt;false&gt;(unsigned long&amp;, DB::ReadBuffer&amp;)#/usr/bin/clickhouse (7 samples, 0.34%)</title><rect width="6.4" height="15" x="1882.7" y="437" fill="#D1112E" rx="2" ry="2"/></g><g><title>TwoLevelHashTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef, void&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef, void&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef, void&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef, void&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt; &gt;, 8ul&gt;::TwoLevelHashTable&lt;HashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef, void&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef, void&gt;, HashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt; &gt; &gt;(HashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef, void&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef, void&gt;, HashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt; &gt; const&amp;)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="45.7" y="341" fill="#D8751D" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="46.6" y="213" fill="#F4A323" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1614.5" y="213" fill="#DD402F" rx="2" ry="2"/></g><g><title>DB::QueryProfilerCpu::signalHandler(int, siginfo_t*, void*)#/usr/bin/clickhouse (19 samples, 0.93%)</title><rect width="17.4" height="15" x="11.8" y="485" fill="#ED4620" rx="2" ry="2"/></g><g><title># (1 samples, 0.05%)</title><rect width=".9" height="15" x="1612.7" y="197" fill="#F3892F" rx="2" ry="2"/></g><g><title>Poco::Net::SocketImpl::poll(Poco::Timespan const&amp;, int)#/usr/bin/clickhouse (6 samples, 0.29%)</title><rect width="5.5" height="15" x="1882.7" y="389" fill="#EB6204" rx="2" ry="2"/></g><g><title>DB::MergeTreeRangeReader::read(unsigned long, std::__1::deque&lt;DB::MarkRange, std::__1::allocator&lt;DB::MarkRange&gt; &gt;&amp;)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1873.5" y="309" fill="#F65C28" rx="2" ry="2"/></g><g><title>large_palloc#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="49.4" y="245" fill="#DF7806" rx="2" ry="2"/></g><g><title>arena_decay#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="49.4" y="229" fill="#FAB71E" rx="2" ry="2"/></g><g><title>DB::ColumnString::operator[](unsigned long) const#/usr/bin/clickhouse (2 samples, 0.10%)</title><rect width="1.8" height="15" x="40.2" y="501" fill="#FC570D" rx="2" ry="2"/></g><g><title>#/usr/lib/x86_64-linux-gnu/libpthread-2.31.so (6 samples, 0.29%)</title><rect width="5.5" height="15" x="1882.7" y="341" fill="#E7BC26" rx="2" ry="2"/></g><g><title># (6 samples, 0.29%)</title><rect width="5.5" height="15" x="1882.7" y="229" fill="#FB4625" rx="2" ry="2"/></g><g><title>DB::AggregatingTransform::work()#/usr/bin/clickhouse (4 samples, 0.19%)</title><rect width="3.7" height="15" x="46.6" y="389" fill="#D60C1A" rx="2" ry="2"/></g><g><title>DB::FunctionArrayIndex&lt;DB::HasAction, DB::NameHas&gt;::executeOnNonNullable(std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt; const&amp;, std::__1::shared_ptr&lt;DB::IDataType const&gt; const&amp;) const#/usr/bin/clickhouse (20 samples, 0.97%)</title><rect width="18.3" height="15" x="87.8" y="261" fill="#DFAC06" rx="2" ry="2"/></g><g><title>re2_st::Compiler::Finish(re2_st::Regexp*)#/usr/bin/clickhouse (2 samples, 0.10%)</title><rect width="1.8" height="15" x="85.1" y="197" fill="#FC7B12" rx="2" ry="2"/></g><g><title>__madvise#/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.05%)</title><rect width=".9" height="15" x="86.9" y="101" fill="#ED342A" rx="2" ry="2"/></g><g><title>operator new(unsigned long)#/usr/bin/clickhouse (3 samples, 0.15%)</title><rect width="2.8" height="15" x="1879.9" y="229" fill="#FB8728" rx="2" ry="2"/></g><g><title>#/usr/lib/x86_64-linux-gnu/libpthread-2.31.so (30 samples, 1.46%)</title><rect width="27.5" height="15" x="11.8" y="501" fill="#F93415" rx="2" ry="2"/><text x="14.83" y="511.5">#..</text></g><g><title>syscall#/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.05%)</title><rect width=".9" height="15" x="1612.7" y="181" fill="#E55014" rx="2" ry="2"/></g><g><title>DB::MergeTreeRangeReader::continueReadingChain(DB::MergeTreeRangeReader::ReadResult&amp;, unsigned long&amp;)#/usr/bin/clickhouse (144 samples, 7.01%)</title><rect width="131.8" height="15" x="1724.3" y="277" fill="#E6DC24" rx="2" ry="2"/><text x="1727.33" y="287.5">DB::MergeTreeRan..</text></g><g><title>DB::FunctionComparison&lt;DB::EqualsOp, DB::NameEquals&gt;::executeString(DB::IColumn const*, DB::IColumn const*) const#/usr/bin/clickhouse (2 samples, 0.10%)</title><rect width="1.8" height="15" x="106.1" y="261" fill="#EF191C" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="10.9" y="117" fill="#D5AC04" rx="2" ry="2"/></g><g><title>LZ4::PerformanceStatistics::select()#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1828.7" y="101" fill="#EECA2F" rx="2" ry="2"/></g><g><title>pthread_mutex_trylock#/usr/lib/x86_64-linux-gnu/libpthread-2.31.so (1 samples, 0.05%)</title><rect width=".9" height="15" x="86" y="37" fill="#F9C708" rx="2" ry="2"/></g><g><title>simdjson::haswell::dom_parser_implementation::stage2(simdjson::dom::document&amp;)#/usr/bin/clickhouse (707 samples, 34.42%)</title><rect width="647.1" height="15" x="745.9" y="229" fill="#F4C21F" rx="2" ry="2"/><text x="748.89" y="239.5">simdjson::haswell::dom_parser_implementation::stage2(simdjson::dom::document&amp;)#/usr/bin/c..</text></g><g><title>DB::MultiplexedConnections::receivePacketUnlocked(std::__1::function&lt;void (int, Poco::Timespan, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;)&gt;)#/usr/bin/clickhouse (11 samples, 0.54%)</title><rect width="10.1" height="15" x="1879" y="469" fill="#E3AC1B" rx="2" ry="2"/></g><g><title># (11 samples, 0.54%)</title><rect width="10.1" height="15" x="29.2" y="405" fill="#D10F2A" rx="2" ry="2"/></g><g><title>DB::Aggregator::mergeAndConvertOneBucketToBlock(std::__1::vector&lt;std::__1::shared_ptr&lt;DB::AggregatedDataVariants&gt;, std::__1::allocator&lt;std::__1::shared_ptr&lt;DB::AggregatedDataVariants&gt; &gt; &gt;&amp;, DB::Arena*, bool, unsigned long, std::__1::atomic&lt;bool&gt;*) const#/usr/bin/clickhouse (4 samples, 0.19%)</title><rect width="3.7" height="15" x="1615.4" y="341" fill="#F0BF2C" rx="2" ry="2"/></g><g><title>read#/usr/lib/x86_64-linux-gnu/libpthread-2.31.so (5 samples, 0.24%)</title><rect width="4.6" height="15" x="1782.9" y="85" fill="#E8C90D" rx="2" ry="2"/></g><g><title>DB::ISimpleTransform::work()#/usr/bin/clickhouse (1,708 samples, 83.15%)</title><rect width="1563.3" height="15" x="52.1" y="389" fill="#FAE035" rx="2" ry="2"/><text x="55.1" y="399.5">DB::ISimpleTransform::work()#/usr/bin/clickhouse</text></g><g><title>#/usr/bin/clickhouse (2 samples, 0.10%)</title><rect width="1.8" height="15" x="50.3" y="357" fill="#DC1307" rx="2" ry="2"/></g><g><title>DB::ReadBufferFromPocoSocket::nextImpl()#/usr/bin/clickhouse (7 samples, 0.34%)</title><rect width="6.4" height="15" x="1882.7" y="421" fill="#F32E1B" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="49.4" y="213" fill="#DE7B08" rx="2" ry="2"/></g><g><title>DB::MergeTreeReaderWide::readRows(unsigned long, bool, unsigned long, std::__1::vector&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;, std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; &gt; &gt;&amp;)#/usr/bin/clickhouse (144 samples, 7.01%)</title><rect width="131.8" height="15" x="1724.3" y="245" fill="#CE7E04" rx="2" ry="2"/><text x="1727.33" y="255.5">DB::MergeTreeRea..</text></g><g><title># (1 samples, 0.05%)</title><rect width=".9" height="15" x="1860.7" y="373" fill="#CF2308" rx="2" ry="2"/></g><g><title>DB::ISimpleTransform::work()#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="10.9" y="453" fill="#F14200" rx="2" ry="2"/></g><g><title># (11 samples, 0.54%)</title><rect width="10.1" height="15" x="29.2" y="453" fill="#DFCE30" rx="2" ry="2"/></g><g><title>HashTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef, void&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef, void&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt; &gt;::resize(unsigned long, unsigned long)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="49.4" y="309" fill="#F5B003" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1873.5" y="421" fill="#DE6E34" rx="2" ry="2"/></g><g><title>tcache_event_hard#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1396.7" y="229" fill="#CD7E35" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width="1" height="15" x="204" y="229" fill="#D71111" rx="2" ry="2"/></g><g><title>void DB::PODArrayBase&lt;1ul, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt;::resize&lt;&gt;(unsigned long)#/usr/bin/clickhouse (29 samples, 1.41%)</title><rect width="26.5" height="15" x="1829.6" y="165" fill="#F38713" rx="2" ry="2"/><text x="1832.59" y="175.5">v..</text></g><g><title>large_ralloc#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1719.8" y="261" fill="#DA642B" rx="2" ry="2"/></g><g><title>std::__1::__call_once(unsigned long volatile&amp;, void*, void (*)(void*))# (1 samples, 0.05%)</title><rect width=".9" height="15" x="10.9" y="261" fill="#D66536" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="56.7" y="309" fill="#E1CB2A" rx="2" ry="2"/></g><g><title>DB::IBlockInputStream::progressImpl(DB::Progress const&amp;)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1879" y="405" fill="#F79E36" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="49.4" y="165" fill="#F34B0E" rx="2" ry="2"/></g><g><title>void HashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef, void&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef, void&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt; &gt;::forEachValue&lt;void DB::Aggregator::convertToBlockImplFinal&lt;DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef, void&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef, void&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt;, HashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef, void&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef, void&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt; &gt; &gt;(DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef, void&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef, void&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt;&amp;, HashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef, void&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef, void&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt; &gt;&amp;, std::__1::vector&lt;DB::IColumn*, std::__1::allocator&lt;DB::IColumn*&gt; &gt;, std::__1::vector&lt;COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt;, std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt; &gt; &gt;&amp;, DB::Arena*) const::&apos;lambda&apos;(DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef, void&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef, void&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt; const&amp;, HashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef, void&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef, void&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt; &gt;&amp;)&gt;(DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef, void&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef, void&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt;&amp;&amp;)#/usr/bin/clickhouse (4 samples, 0.19%)</title><rect width="3.7" height="15" x="1615.4" y="277" fill="#D1B21F" rx="2" ry="2"/></g><g><title>re2_st::Prog::SearchDFA(re2_st::StringPiece const&amp;, re2_st::StringPiece const&amp;, re2_st::Prog::Anchor, re2_st::Prog::MatchKind, re2_st::StringPiece*, bool*, re2_st::SparseSetT&lt;void&gt;*)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width="1" height="15" x="1862.5" y="501" fill="#E9A300" rx="2" ry="2"/></g><g><title>DB::ColumnConst::cloneResized(unsigned long) const#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="55.8" y="325" fill="#D15B0D" rx="2" ry="2"/></g><g><title>DB::ISimpleTransform::transform(DB::Chunk&amp;, DB::Chunk&amp;)#/usr/bin/clickhouse (1,708 samples, 83.15%)</title><rect width="1563.3" height="15" x="52.1" y="373" fill="#E8B523" rx="2" ry="2"/><text x="55.1" y="383.5">DB::ISimpleTransform::transform(DB::Chunk&amp;, DB::Chunk&amp;)#/usr/bin/clickhouse</text></g><g><title>void DB::PODArrayBase&lt;1ul, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt;::resize&lt;&gt;(unsigned long)#/usr/bin/clickhouse (4 samples, 0.19%)</title><rect width="3.7" height="15" x="1874.4" y="501" fill="#E77820" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (144 samples, 7.01%)</title><rect width="131.8" height="15" x="1724.3" y="181" fill="#F57300" rx="2" ry="2"/><text x="1727.33" y="191.5">#/usr/bin/clickh..</text></g><g><title>DB::HashJoin::addJoinedBlock(DB::Block const&amp;, bool)#/usr/bin/clickhouse (2 samples, 0.10%)</title><rect width="1.8" height="15" x="50.3" y="373" fill="#FD7A14" rx="2" ry="2"/></g><g><title>extent_dalloc_wrapper#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="86.9" y="133" fill="#E45722" rx="2" ry="2"/></g><g><title>DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;, std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; &gt; &gt;&amp;)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1873.5" y="277" fill="#EF8A01" rx="2" ry="2"/></g><g><title>DB::ISource::tryGenerate()#/usr/bin/clickhouse (4 samples, 0.19%)</title><rect width="3.7" height="15" x="1615.4" y="373" fill="#F91805" rx="2" ry="2"/></g><g><title># (9 samples, 0.44%)</title><rect width="8.2" height="15" x="31.1" y="389" fill="#D3CF14" rx="2" ry="2"/></g><g><title>DB::Connection::receiveDataImpl(std::__1::shared_ptr&lt;DB::IBlockInputStream&gt;&amp;)#/usr/bin/clickhouse (4 samples, 0.19%)</title><rect width="3.7" height="15" x="1879" y="437" fill="#E5762F" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="208.6" y="165" fill="#FBE405" rx="2" ry="2"/></g><g><title>DB::writeJSONString(char const*, char const*, DB::WriteBuffer&amp;, DB::FormatSettings const&amp;)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="123.5" y="213" fill="#D07E32" rx="2" ry="2"/></g><g><title>arena_extents_dirty_dalloc#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="375.2" y="197" fill="#DB0A35" rx="2" ry="2"/></g><g><title>extent_dalloc_wrapper#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width="1" height="15" x="54.8" y="213" fill="#D07508" rx="2" ry="2"/></g><g><title>DB::JoiningTransform::work()#/usr/bin/clickhouse (115 samples, 5.60%)</title><rect width="105.2" height="15" x="1619.1" y="389" fill="#FC0E12" rx="2" ry="2"/><text x="1622.07" y="399.5">DB::JoiningT..</text></g><g><title>DB::IParserBase::parse(DB::IParser::Pos&amp;, std::__1::shared_ptr&lt;DB::IAST&gt;&amp;, DB::Expected&amp;)#/usr/bin/clickhouse (3 samples, 0.15%)</title><rect width="2.8" height="15" x="1879.9" y="277" fill="#DFBF20" rx="2" ry="2"/></g><g><title>DB::Field::~Field()#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="103.4" y="229" fill="#F04F10" rx="2" ry="2"/></g><g><title>DB::CompressedReadBufferBase::readCompressedData(unsigned long&amp;, unsigned long&amp;, bool)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1770.1" y="149" fill="#FD2934" rx="2" ry="2"/></g><g><title>DB::ISerialization::deserializeBinaryBulkWithMultipleStreams(COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;&amp;, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&amp;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt;&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; &gt; &gt; &gt;*) const#/usr/bin/clickhouse (144 samples, 7.01%)</title><rect width="131.8" height="15" x="1724.3" y="213" fill="#FEC71A" rx="2" ry="2"/><text x="1727.33" y="223.5">DB::ISerializati..</text></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1873.5" y="213" fill="#DB5D30" rx="2" ry="2"/></g><g><title>ThreadPoolImpl&lt;std::__1::thread&gt;::worker(std::__1::__list_iterator&lt;std::__1::thread, void*&gt;)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1873.5" y="469" fill="#D42B2D" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="86" y="53" fill="#F65A16" rx="2" ry="2"/></g><g><title>DB::TokenIterator::get()#/usr/bin/clickhouse (3 samples, 0.15%)</title><rect width="2.8" height="15" x="1879.9" y="245" fill="#F98E04" rx="2" ry="2"/></g><g><title>DB::ColumnVector&lt;StrongTypedef&lt;wide::integer&lt;128ul, unsigned int&gt;, DB::UUIDTag&gt; &gt;::deserializeAndInsertFromArena(char const*)#/usr/bin/clickhouse (2 samples, 0.10%)</title><rect width="1.9" height="15" x="1617.2" y="261" fill="#EE4A1B" rx="2" ry="2"/></g><g><title>DB::MergeTreeRangeReader::continueReadingChain(DB::MergeTreeRangeReader::ReadResult&amp;, unsigned long&amp;)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1873.5" y="293" fill="#E16C11" rx="2" ry="2"/></g><g><title>DB::IParserBase::parse(DB::IParser::Pos&amp;, std::__1::shared_ptr&lt;DB::IAST&gt;&amp;, DB::Expected&amp;)#/usr/bin/clickhouse (3 samples, 0.15%)</title><rect width="2.8" height="15" x="1879.9" y="341" fill="#D81106" rx="2" ry="2"/></g><g><title>start_thread#/usr/lib/x86_64-linux-gnu/libpthread-2.31.so (1,980 samples, 96.40%)</title><rect width="1812.3" height="15" x="45.7" y="485" fill="#F21F35" rx="2" ry="2"/><text x="48.7" y="495.5">start_thread#/usr/lib/x86_64-linux-gnu/libpthread-2.31.so</text></g><g><title># (1 samples, 0.05%)</title><rect width=".9" height="15" x="1873.5" y="85" fill="#F8241D" rx="2" ry="2"/></g><g><title>re2_st::DFA::RunStateOnByte(re2_st::DFA::State*, int)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="82.3" y="165" fill="#D78B03" rx="2" ry="2"/></g><g><title>StackTrace::StackTrace(ucontext_t const&amp;)#/usr/bin/clickhouse (11 samples, 0.54%)</title><rect width="10.1" height="15" x="29.2" y="469" fill="#E5AE02" rx="2" ry="2"/></g><g><title>DB::FunctionsStringSearchToString&lt;DB::ExtractParamToStringImpl&lt;DB::ExtractRaw&gt;, DB::NameVisitParamExtractRaw&gt;::executeImpl(std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt; const&amp;, std::__1::shared_ptr&lt;DB::IDataType const&gt; const&amp;, unsigned long) const#/usr/bin/clickhouse (232 samples, 11.30%)</title><rect width="212.3" height="15" x="1402.2" y="277" fill="#E4871C" rx="2" ry="2"/><text x="1405.15" y="287.5">DB::FunctionsStringSearchTo..</text></g><g><title>std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;re2_st::DFA::State*, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;re2_st::DFA::State*, re2_st::DFA::StateHash, re2_st::DFA::StateEqual, std::__1::allocator&lt;re2_st::DFA::State*&gt; &gt;::__emplace_unique_key_args&lt;re2_st::DFA::State*, re2_st::DFA::State* const&amp;&gt;(re2_st::DFA::State* const&amp;, re2_st::DFA::State* const&amp;)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="82.3" y="117" fill="#DD3015" rx="2" ry="2"/></g><g><title>DB::ReplaceRegexpImpl&lt;false&gt;::vector(DB::PODArray&lt;char8_t, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt; const&amp;, DB::PODArray&lt;unsigned long, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, DB::PODArray&lt;char8_t, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt;&amp;, DB::PODArray&lt;unsigned long, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt;&amp;)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="10.9" y="325" fill="#F49618" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="208.6" y="133" fill="#E7DD16" rx="2" ry="2"/></g><g><title>re2_st::Compiler::Compile(re2_st::Regexp*, bool, long)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="10.9" y="229" fill="#CD6228" rx="2" ry="2"/></g><g><title>DB::Connection::receivePacket()#/usr/bin/clickhouse (11 samples, 0.54%)</title><rect width="10.1" height="15" x="1879" y="453" fill="#EE3220" rx="2" ry="2"/></g><g><title>tcache_event_hard#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="86" y="133" fill="#FB6934" rx="2" ry="2"/></g><g><title>DB::SerializationString::deserializeBinaryBulk(DB::IColumn&amp;, DB::ReadBuffer&amp;, unsigned long, double) const#/usr/bin/clickhouse (144 samples, 7.01%)</title><rect width="131.8" height="15" x="1724.3" y="197" fill="#D27F33" rx="2" ry="2"/><text x="1727.33" y="207.5">DB::Serializatio..</text></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="208.6" y="181" fill="#E65715" rx="2" ry="2"/></g><g><title>Allocator&lt;false, false&gt;::allocNoTrack(unsigned long, unsigned long)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="86.9" y="229" fill="#F1B61B" rx="2" ry="2"/></g><g><title>operator new(unsigned long)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="85.1" y="165" fill="#E2002B" rx="2" ry="2"/></g><g><title>DB::CompressedReadBufferFromFile::seek(unsigned long, unsigned long)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1873.5" y="181" fill="#DA0D2D" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="49.4" y="181" fill="#D88C0E" rx="2" ry="2"/></g><g><title>LZ4::decompress(char const*, char*, unsigned long, unsigned long, LZ4::PerformanceStatistics&amp;)#/usr/bin/clickhouse (11 samples, 0.54%)</title><rect width="10.1" height="15" x="1771" y="133" fill="#EAA62E" rx="2" ry="2"/></g><g><title>tcache_alloc_small_hard#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="46.6" y="277" fill="#EB412A" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="10.9" y="101" fill="#E92B23" rx="2" ry="2"/></g><g><title>Allocator&lt;false, false&gt;::realloc(void*, unsigned long, unsigned long, unsigned long)#/usr/bin/clickhouse (4 samples, 0.19%)</title><rect width="3.6" height="15" x="1719.8" y="309" fill="#D65C06" rx="2" ry="2"/></g><g><title>operator new(unsigned long)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="10.9" y="181" fill="#D5AC17" rx="2" ry="2"/></g><g><title>std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt;::vector(std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt; const&amp;)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1614.5" y="309" fill="#E79C16" rx="2" ry="2"/></g><g><title>MemoryTracker::alloc(long)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1873.5" y="133" fill="#EC132D" rx="2" ry="2"/></g><g><title>TwoLevelHashTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef, void&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef, void&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef, void&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef, void&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt; &gt;, 8ul&gt;::TwoLevelHashTable&lt;HashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef, void&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef, void&gt;, HashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt; &gt; &gt;(HashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef, void&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef, void&gt;, HashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt; &gt; const&amp;)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="46.6" y="325" fill="#EB8229" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="205" y="213" fill="#ED5B28" rx="2" ry="2"/></g><g><title>__madvise#/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.05%)</title><rect width=".9" height="15" x="208.6" y="117" fill="#E58C16" rx="2" ry="2"/></g><g><title>DB::ISimpleTransform::transform(DB::Chunk&amp;, DB::Chunk&amp;)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="10.9" y="437" fill="#DA4726" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="375.2" y="165" fill="#D18036" rx="2" ry="2"/></g><g><title>re2_st::Prog::Flatten()#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="85.1" y="181" fill="#DBB20D" rx="2" ry="2"/></g><g><title>MemoryTracker::alloc(long)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1873.5" y="117" fill="#CEAD0A" rx="2" ry="2"/></g><g><title>DB::QueryProfilerReal::signalHandler(int, siginfo_t*, void*)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1878.1" y="453" fill="#CDDA0D" rx="2" ry="2"/></g><g><title>DB::ExpressionActions::execute(DB::Block&amp;, unsigned long&amp;, bool) const#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width="1" height="15" x="1857" y="229" fill="#CF0F14" rx="2" ry="2"/></g><g><title>large_dalloc#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1619.1" y="293" fill="#D0D914" rx="2" ry="2"/></g><g><title>DB::FunctionArrayIndex&lt;DB::HasAction, DB::NameHas&gt;::executeConst(std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt; const&amp;, std::__1::shared_ptr&lt;DB::IDataType const&gt; const&amp;)#/usr/bin/clickhouse (20 samples, 0.97%)</title><rect width="18.3" height="15" x="87.8" y="245" fill="#DB6410" rx="2" ry="2"/></g><g><title>bool DB::readFloatTextFastImpl&lt;double, bool&gt;(double&amp;, DB::ReadBuffer&amp;)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1860.7" y="501" fill="#F3CC26" rx="2" ry="2"/></g><g><title>DB::ConvertingAggregatedToChunksSource::generate()#/usr/bin/clickhouse (4 samples, 0.19%)</title><rect width="3.7" height="15" x="1615.4" y="357" fill="#F7AF02" rx="2" ry="2"/></g><g><title>large_palloc#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1404.9" y="213" fill="#DC4D2C" rx="2" ry="2"/></g><g><title>DB::MergeTreeBaseSelectProcessor::readFromPart()#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1873.5" y="341" fill="#FEA00D" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="10.9" y="245" fill="#F7CC21" rx="2" ry="2"/></g><g><title>operator delete[](void*)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1613.6" y="245" fill="#EA5608" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="86" y="69" fill="#FD4F1E" rx="2" ry="2"/></g><g><title>DB::JoiningTransform::readExecute(DB::Chunk&amp;)#/usr/bin/clickhouse (115 samples, 5.60%)</title><rect width="105.2" height="15" x="1619.1" y="357" fill="#E03C0D" rx="2" ry="2"/><text x="1622.07" y="367.5">DB::JoiningT..</text></g><g><title>#/usr/bin/clickhouse (5 samples, 0.24%)</title><rect width="4.6" height="15" x="1397.6" y="261" fill="#F40D02" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="205" y="197" fill="#D9210B" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="10.9" y="341" fill="#E82219" rx="2" ry="2"/></g><g><title>#/usr/lib/x86_64-linux-gnu/libpthread-2.31.so (1 samples, 0.05%)</title><rect width=".9" height="15" x="1860.7" y="485" fill="#D37736" rx="2" ry="2"/></g><g><title># (1 samples, 0.05%)</title><rect width=".9" height="15" x="1878.1" y="389" fill="#D51E02" rx="2" ry="2"/></g><g><title># (6 samples, 0.29%)</title><rect width="5.5" height="15" x="1882.7" y="245" fill="#E1280A" rx="2" ry="2"/></g><g><title>memcpy#/usr/bin/clickhouse (3 samples, 0.15%)</title><rect width="2.7" height="15" x="1720.7" y="293" fill="#F1AF04" rx="2" ry="2"/></g><g><title>DB::FillingRightJoinSideTransform::work()#/usr/bin/clickhouse (2 samples, 0.10%)</title><rect width="1.8" height="15" x="50.3" y="389" fill="#E17B32" rx="2" ry="2"/></g><g><title>MemoryTracker::alloc(long)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1612.7" y="245" fill="#DD3" rx="2" ry="2"/></g><g><title>re2_st::DFA::CachedState(int*, int, unsigned int)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="82.3" y="133" fill="#D84B0E" rx="2" ry="2"/></g><g><title>DB::Block DB::Aggregator::prepareBlockAndFill&lt;DB::Block DB::Aggregator::convertOneBucketToBlock&lt;DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef, void&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef, void&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt; &gt;(DB::AggregatedDataVariants&amp;, DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef, void&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef, void&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt;&amp;, DB::Arena*, bool, unsigned long) const::&apos;lambda&apos;(std::__1::vector&lt;COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt;, std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt; &gt; &gt;&amp;, std::__1::vector&lt;DB::PODArray&lt;char*, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt;*, std::__1::allocator&lt;DB::PODArray&lt;char*, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt;*&gt; &gt;&amp;, std::__1::vector&lt;COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt;, std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt; &gt; &gt;&amp;, bool)&gt;(DB::AggregatedDataVariants&amp;, bool, unsigned long, DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef, void&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef, void&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt;&amp;&amp;) const#/usr/bin/clickhouse (4 samples, 0.19%)</title><rect width="3.7" height="15" x="1615.4" y="325" fill="#F45E17" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="86.9" y="117" fill="#EB0410" rx="2" ry="2"/></g><g><title>DB::DateTimeTransformImpl&lt;DB::DataTypeDateTime64, DB::DataTypeDateTime, DB::TransformDateTime64&lt;DB::ToStartOfDayImpl&gt; const&gt;::execute(std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt; const&amp;, std::__1::shared_ptr&lt;DB::IDataType const&gt; const&amp;, unsigned long, DB::TransformDateTime64&lt;DB::ToStartOfDayImpl&gt; const&amp;)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width="1" height="15" x="1857" y="149" fill="#E9C81C" rx="2" ry="2"/></g><g><title>re2_st::RE2::Match(re2_st::StringPiece const&amp;, unsigned long, unsigned long, re2_st::RE2::Anchor, re2_st::StringPiece*, int) const#/usr/bin/clickhouse (9 samples, 0.44%)</title><rect width="8.3" height="15" x="76.8" y="229" fill="#D02926" rx="2" ry="2"/></g><g><title>re2_st::RE2::ReverseProg() const#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="10.9" y="277" fill="#E01110" rx="2" ry="2"/></g><g><title>simdjson::dom::document::allocate(unsigned long)#/usr/bin/clickhouse (4 samples, 0.19%)</title><rect width="3.6" height="15" x="373.4" y="229" fill="#DE8E1B" rx="2" ry="2"/></g><g><title>DB::ReplaceRegexpImpl&lt;false&gt;::processString(re2_st::StringPiece const&amp;, DB::PODArray&lt;char8_t, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt;&amp;, unsigned long&amp;, re2_st::RE2&amp;, int, std::__1::vector&lt;std::__1::pair&lt;int, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;int, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt; &gt; const&amp;)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="44.8" y="501" fill="#D9CE30" rx="2" ry="2"/></g><g><title>#/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.05%)</title><rect width="1" height="15" x="84.1" y="165" fill="#DC9032" rx="2" ry="2"/></g><g><title># (1 samples, 0.05%)</title><rect width=".9" height="15" x="10" y="501" fill="#E42F1A" rx="2" ry="2"/></g><g><title>arena_extents_dirty_dalloc#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="205" y="229" fill="#F8020C" rx="2" ry="2"/></g><g><title>DB::CompressedReadBufferFromFile::nextImpl()#/usr/bin/clickhouse (53 samples, 2.58%)</title><rect width="48.5" height="15" x="1781.1" y="149" fill="#DCCC03" rx="2" ry="2"/><text x="1784.08" y="159.5">DB::..</text></g><g><title># (1 samples, 0.05%)</title><rect width=".9" height="15" x="1878.1" y="405" fill="#D30D0A" rx="2" ry="2"/></g><g><title>DB::ReadBuffer::readStrict(char*, unsigned long)#/usr/bin/clickhouse (53 samples, 2.58%)</title><rect width="48.5" height="15" x="1781.1" y="165" fill="#D33214" rx="2" ry="2"/><text x="1784.08" y="175.5">DB::..</text></g><g><title>__libc_calloc#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="46.6" y="293" fill="#DD261F" rx="2" ry="2"/></g><g><title>large_ralloc#/usr/bin/clickhouse (28 samples, 1.36%)</title><rect width="25.6" height="15" x="1830.5" y="101" fill="#CD4D18" rx="2" ry="2"/><text x="1833.51" y="111.5">l..</text></g><g><title>#/usr/lib/x86_64-linux-gnu/libpthread-2.31.so (1 samples, 0.05%)</title><rect width=".9" height="15" x="1878.1" y="469" fill="#F8C81A" rx="2" ry="2"/></g><g><title># (1 samples, 0.05%)</title><rect width=".9" height="15" x="1860.7" y="437" fill="#F8C830" rx="2" ry="2"/></g><g><title>__clone#/usr/lib/x86_64-linux-gnu/libc-2.31.so (1,980 samples, 96.40%)</title><rect width="1812.3" height="15" x="45.7" y="501" fill="#FDBA02" rx="2" ry="2"/><text x="48.7" y="511.5">__clone#/usr/lib/x86_64-linux-gnu/libc-2.31.so</text></g><g><title>DB::DataTypeFactory::get(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;) const#/usr/bin/clickhouse (3 samples, 0.15%)</title><rect width="2.8" height="15" x="1879.9" y="389" fill="#D26908" rx="2" ry="2"/></g><g><title>arena_extents_dirty_dalloc#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="86" y="101" fill="#EB3412" rx="2" ry="2"/></g><g><title>memcpy#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1616.3" y="245" fill="#F6BD21" rx="2" ry="2"/></g><g><title>DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt; const&amp;, std::__1::shared_ptr&lt;DB::IDataType const&gt; const&amp;, unsigned long, bool) const#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="10.9" y="373" fill="#CED62F" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="205" y="181" fill="#DFCC15" rx="2" ry="2"/></g><g><title>DB::ParserNestedTable::parseImpl(DB::IParser::Pos&amp;, std::__1::shared_ptr&lt;DB::IAST&gt;&amp;, DB::Expected&amp;)#/usr/bin/clickhouse (3 samples, 0.15%)</title><rect width="2.8" height="15" x="1879.9" y="293" fill="#F62229" rx="2" ry="2"/></g><g><title>simdjson::haswell::dom_parser_implementation::stage1(unsigned char const*, unsigned long, simdjson::stage1_mode)#/usr/bin/clickhouse (402 samples, 19.57%)</title><rect width="368" height="15" x="377.9" y="213" fill="#E16925" rx="2" ry="2"/><text x="380.95" y="223.5">simdjson::haswell::dom_parser_implementation::sta..</text></g><g><title>CurrentMemoryTracker::alloc(long)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="373.4" y="213" fill="#FE2836" rx="2" ry="2"/></g><g><title>DB::ColumnString::insertDefault()#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="39.3" y="501" fill="#E11822" rx="2" ry="2"/></g><g><title># (1 samples, 0.05%)</title><rect width=".9" height="15" x="1860.7" y="421" fill="#D15700" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1,708 samples, 83.15%)</title><rect width="1563.3" height="15" x="52.1" y="357" fill="#FBAA02" rx="2" ry="2"/><text x="55.1" y="367.5">#/usr/bin/clickhouse</text></g><g><title>DB::MergeTreeBaseSelectProcessor::readFromPartImpl()#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1873.5" y="325" fill="#DD341E" rx="2" ry="2"/></g><g><title>DB::ExpressionActions::execute(DB::Block&amp;, unsigned long&amp;, bool) const#/usr/bin/clickhouse (1,706 samples, 83.06%)</title><rect width="1561.5" height="15" x="53.9" y="341" fill="#F40218" rx="2" ry="2"/><text x="56.93" y="351.5">DB::ExpressionActions::execute(DB::Block&amp;, unsigned long&amp;, bool) const#/usr/bin/clickhouse</text></g><g><title>DB::MergeTreeBaseSelectProcessor::readFromPart()#/usr/bin/clickhouse (146 samples, 7.11%)</title><rect width="133.7" height="15" x="1724.3" y="325" fill="#E0E11E" rx="2" ry="2"/><text x="1727.33" y="335.5">DB::MergeTreeBas..</text></g><g><title>Allocator&lt;false, false&gt;::free(void*, unsigned long)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width="1" height="15" x="54.8" y="293" fill="#DD8728" rx="2" ry="2"/></g><g><title>DB::QueryProfilerReal::signalHandler(int, siginfo_t*, void*)#/usr/bin/clickhouse (11 samples, 0.54%)</title><rect width="10.1" height="15" x="29.2" y="485" fill="#EB0515" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="49.4" y="149" fill="#EB6606" rx="2" ry="2"/></g><g><title>pthread_mutex_trylock#/usr/lib/x86_64-linux-gnu/libpthread-2.31.so (1 samples, 0.05%)</title><rect width=".9" height="15" x="1861.6" y="501" fill="#E9070B" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="86.9" y="165" fill="#CD3E0F" rx="2" ry="2"/></g><g><title>DB::IExecutableFunction::execute(std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt; const&amp;, std::__1::shared_ptr&lt;DB::IDataType const&gt; const&amp;, unsigned long, bool) const#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width="1" height="15" x="1857" y="213" fill="#D1402A" rx="2" ry="2"/></g><g><title>tcache_bin_flush_small#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1396.7" y="213" fill="#FA172E" rx="2" ry="2"/></g><g><title>arena_ralloc#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="49.4" y="261" fill="#D40F2B" rx="2" ry="2"/></g><g><title>simdjson::haswell::dom_parser_implementation::stage1(unsigned char const*, unsigned long, simdjson::stage1_mode)#/usr/bin/clickhouse (2 samples, 0.10%)</title><rect width="1.8" height="15" x="1864.4" y="501" fill="#E07918" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width="1" height="15" x="54.8" y="261" fill="#E7DA2C" rx="2" ry="2"/></g><g><title>bool DB::readFloatTextFastImpl&lt;double, bool&gt;(double&amp;, DB::ReadBuffer&amp;)#/usr/bin/clickhouse (2 samples, 0.10%)</title><rect width="1.8" height="15" x="109.8" y="245" fill="#F2CD13" rx="2" ry="2"/></g><g><title>auto DB::Field::dispatch&lt;auto auto DB::applyVisitor&lt;DB::FieldVisitorAccurateEquals, DB::Field&amp;, DB::Field const&amp;&gt;(DB::FieldVisitorAccurateEquals&amp;&amp;, DB::Field&amp;, DB::Field const&amp;)::&apos;lambda&apos;(DB::FieldVisitorAccurateEquals&amp;)::operator()&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;(DB::FieldVisitorAccurateEquals&amp;) const::&apos;lambda&apos;(DB::FieldVisitorAccurateEquals&amp;), DB::Field const&amp;&gt;(DB::FieldVisitorAccurateEquals&amp;&amp;, DB::Field&amp;)#/usr/bin/clickhouse (2 samples, 0.10%)</title><rect width="1.8" height="15" x="104.3" y="213" fill="#D6800F" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1396.7" y="181" fill="#D0050C" rx="2" ry="2"/></g><g><title>large_ralloc#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="51.2" y="277" fill="#D08716" rx="2" ry="2"/></g><g><title>DB::FunctionJSONHelpers::Executor&lt;DB::NameJSONExtractRaw, DB::JSONExtractRawImpl, DB::SimdJSONParser&gt;::run(std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt; const&amp;, std::__1::shared_ptr&lt;DB::IDataType const&gt; const&amp;, unsigned long)#/usr/bin/clickhouse (1,400 samples, 68.16%)</title><rect width="1281.4" height="15" x="111.6" y="261" fill="#DACB01" rx="2" ry="2"/><text x="114.6" y="271.5">DB::FunctionJSONHelpers::Executor&lt;DB::NameJSONExtractRaw, DB::JSONExtractRawImpl, DB::SimdJSONParser&gt;::run(std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::Col..</text></g><g><title># (6 samples, 0.29%)</title><rect width="5.5" height="15" x="1882.7" y="293" fill="#E72F0D" rx="2" ry="2"/></g><g><title>large_palloc#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="86.9" y="197" fill="#FA2606" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width="1" height="15" x="1401.2" y="245" fill="#F33220" rx="2" ry="2"/></g><g><title># (6 samples, 0.29%)</title><rect width="5.5" height="15" x="1882.7" y="261" fill="#DBD31B" rx="2" ry="2"/></g><g><title>__libc_realloc#/usr/bin/clickhouse (28 samples, 1.36%)</title><rect width="25.6" height="15" x="1830.5" y="133" fill="#CDDB30" rx="2" ry="2"/><text x="1833.51" y="143.5">_..</text></g><g><title>__madvise#/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.05%)</title><rect width=".9" height="15" x="10.9" y="37" fill="#E84116" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="374.3" y="133" fill="#D7DF2E" rx="2" ry="2"/></g><g><title>DB::Block::clear()#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width="1" height="15" x="54.8" y="325" fill="#E13E01" rx="2" ry="2"/></g><g><title>DB::ISerialization::deserializeBinaryBulkWithMultipleStreams(COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;&amp;, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&amp;, std::__1::shared_ptr&lt;DB::ISerialization::DeserializeBinaryBulkState&gt;&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; &gt; &gt; &gt;*) const#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1873.5" y="229" fill="#F7AC04" rx="2" ry="2"/></g><g><title>StackTrace::StackTrace(ucontext_t const&amp;)#/usr/bin/clickhouse (6 samples, 0.29%)</title><rect width="5.5" height="15" x="1882.7" y="309" fill="#F3360A" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (33 samples, 1.61%)</title><rect width="30.2" height="15" x="57.6" y="277" fill="#F5630D" rx="2" ry="2"/><text x="60.59" y="287.5">#/..</text></g><g><title>DB::SourceWithProgress::work()#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1873.5" y="405" fill="#F99121" rx="2" ry="2"/></g><g><title>malloc_default#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="376.1" y="213" fill="#F0DD21" rx="2" ry="2"/></g><g><title>DB::StringEqualsImpl&lt;true&gt;::string_vector_constant(DB::PODArray&lt;char8_t, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt; const&amp;, DB::PODArray&lt;unsigned long, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt; const&amp;, DB::PODArray&lt;char8_t, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt; const&amp;, unsigned long, DB::PODArray&lt;char8_t, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt;&amp;)#/usr/bin/clickhouse (2 samples, 0.10%)</title><rect width="1.8" height="15" x="106.1" y="245" fill="#EF2205" rx="2" ry="2"/></g><g><title>memcpy#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="51.2" y="261" fill="#D49B1E" rx="2" ry="2"/></g><g><title>CurrentMemoryTracker::alloc(long)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1405.8" y="245" fill="#F06910" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="205" y="165" fill="#D0A02F" rx="2" ry="2"/></g><g><title>void DB::Aggregator::convertToBlockImplFinal&lt;DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef, void&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef, void&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt;, HashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef, void&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef, void&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt; &gt; &gt;(DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef, void&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef, void&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt;&amp;, HashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef, void&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef, void&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt; &gt;&amp;, std::__1::vector&lt;DB::IColumn*, std::__1::allocator&lt;DB::IColumn*&gt; &gt;, std::__1::vector&lt;COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt;, std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt; &gt; &gt;&amp;, DB::Arena*) const#/usr/bin/clickhouse (4 samples, 0.19%)</title><rect width="3.7" height="15" x="1615.4" y="293" fill="#E9B11C" rx="2" ry="2"/></g><g><title>COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; DB::ConvertThroughParsing&lt;DB::DataTypeString, DB::DataTypeNumber&lt;double&gt;, DB::NameToFloat64OrNull, (DB::ConvertFromStringExceptionMode)2, (DB::ConvertFromStringParsingMode)0&gt;::execute&lt;unsigned int&gt;(std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt; const&amp;, std::__1::shared_ptr&lt;DB::IDataType const&gt; const&amp;, unsigned long, unsigned int)#/usr/bin/clickhouse (4 samples, 0.19%)</title><rect width="3.7" height="15" x="107.9" y="261" fill="#E84E02" rx="2" ry="2"/></g><g><title>DB::ColumnString::deserializeAndInsertFromArena(char const*)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1616.3" y="261" fill="#EBC114" rx="2" ry="2"/></g><g><title>DB::QueryProfilerReal::signalHandler(int, siginfo_t*, void*)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1860.7" y="469" fill="#E40224" rx="2" ry="2"/></g><g><title>Allocator&lt;false, false&gt;::free(void*, unsigned long)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1619.1" y="309" fill="#DF442C" rx="2" ry="2"/></g><g><title>auto DB::Field::dispatch&lt;auto DB::applyVisitor&lt;DB::FieldVisitorAccurateEquals, DB::Field&amp;, DB::Field const&amp;&gt;(DB::FieldVisitorAccurateEquals&amp;&amp;, DB::Field&amp;, DB::Field const&amp;)::&apos;lambda&apos;(DB::FieldVisitorAccurateEquals&amp;), DB::Field&amp;&gt;(DB::FieldVisitorAccurateEquals&amp;&amp;, DB::Field&amp;)#/usr/bin/clickhouse (2 samples, 0.10%)</title><rect width="1.8" height="15" x="104.3" y="229" fill="#EF2729" rx="2" ry="2"/></g><g><title>start_thread#/usr/lib/x86_64-linux-gnu/libpthread-2.31.so (1 samples, 0.05%)</title><rect width=".9" height="15" x="1873.5" y="501" fill="#F2D70D" rx="2" ry="2"/></g><g><title>DB::tryParseQuery(DB::IParser&amp;, char const*&amp;, char const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;&amp;, bool, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, bool, unsigned long, unsigned long)#/usr/bin/clickhouse (3 samples, 0.15%)</title><rect width="2.8" height="15" x="1879.9" y="357" fill="#F46E06" rx="2" ry="2"/></g><g><title>DB::ISource::work()#/usr/bin/clickhouse (4 samples, 0.19%)</title><rect width="3.7" height="15" x="1615.4" y="389" fill="#FC6505" rx="2" ry="2"/></g><g><title>std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, unsigned long&gt; &gt; &gt;::find&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;) const#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1856.1" y="229" fill="#DB7C25" rx="2" ry="2"/></g><g><title>StackTrace::StackTrace()#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1612.7" y="213" fill="#D9252A" rx="2" ry="2"/></g><g><title># (1 samples, 0.05%)</title><rect width=".9" height="15" x="1873.5" y="69" fill="#D82008" rx="2" ry="2"/></g><g><title>re2_st::Prog::SearchDFA(re2_st::StringPiece const&amp;, re2_st::StringPiece const&amp;, re2_st::Prog::Anchor, re2_st::Prog::MatchKind, re2_st::StringPiece*, bool*, re2_st::SparseSetT&lt;void&gt;*)#/usr/bin/clickhouse (8 samples, 0.39%)</title><rect width="7.4" height="15" x="77.7" y="213" fill="#D89124" rx="2" ry="2"/></g><g><title>DB::Aggregator::prepareVariantsToMerge(std::__1::vector&lt;std::__1::shared_ptr&lt;DB::AggregatedDataVariants&gt;, std::__1::allocator&lt;std::__1::shared_ptr&lt;DB::AggregatedDataVariants&gt; &gt; &gt;&amp;) const#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="45.7" y="373" fill="#FB8216" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="86" y="85" fill="#F7D604" rx="2" ry="2"/></g><g><title>DB::ReadBufferFromFileDescriptor::nextImpl()#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1770.1" y="117" fill="#EB3734" rx="2" ry="2"/></g><g><title>DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;, std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; &gt; &gt;&amp;)#/usr/bin/clickhouse (144 samples, 7.01%)</title><rect width="131.8" height="15" x="1724.3" y="261" fill="#ED1815" rx="2" ry="2"/><text x="1727.33" y="271.5">DB::MergeTreeRan..</text></g><g><title>simdjson::dom::parser::parse_into_document(simdjson::dom::document&amp;, unsigned char const*, unsigned long, bool) &amp;#/usr/bin/clickhouse (1,297 samples, 63.15%)</title><rect width="1187.1" height="15" x="205.9" y="245" fill="#EF9614" rx="2" ry="2"/><text x="208.87" y="255.5">simdjson::dom::parser::parse_into_document(simdjson::dom::document&amp;, unsigned char const*, unsigned long, bool) &amp;#/usr/bin/clickhouse</text></g><g><title>DB::CompressedReadBufferBase::readCompressedData(unsigned long&amp;, unsigned long&amp;, bool)#/usr/bin/clickhouse (7 samples, 0.34%)</title><rect width="6.4" height="15" x="1781.1" y="133" fill="#E09300" rx="2" ry="2"/></g><g><title>arena_tcache_fill_small#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="46.6" y="261" fill="#DD0B13" rx="2" ry="2"/></g><g><title>bool DB::FunctionJSONHelpers::performMoves&lt;DB::SimdJSONParser&gt;(std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt; const&amp;, unsigned long, DB::SimdJSONParser::Element const&amp;, std::__1::vector&lt;DB::FunctionJSONHelpers::Move, std::__1::allocator&lt;DB::FunctionJSONHelpers::Move&gt; &gt; const&amp;, DB::SimdJSONParser::Element&amp;, std::__1::basic_string_view&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1859.8" y="501" fill="#E9B31A" rx="2" ry="2"/></g><g><title>Allocator&lt;true, true&gt;::realloc(void*, unsigned long, unsigned long, unsigned long)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="51.2" y="325" fill="#F67D33" rx="2" ry="2"/></g><g><title>tcache_event_hard#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="10.9" y="149" fill="#ED331D" rx="2" ry="2"/></g><g><title>DB::IExecutableFunction::execute(std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt; const&amp;, std::__1::shared_ptr&lt;DB::IDataType const&gt; const&amp;, unsigned long, bool) const#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="10.9" y="389" fill="#E2B50A" rx="2" ry="2"/></g><g><title>DB::FunctionArrayIndex&lt;DB::HasAction, DB::NameHas&gt;::executeImpl(std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt; const&amp;, std::__1::shared_ptr&lt;DB::IDataType const&gt; const&amp;, unsigned long) const#/usr/bin/clickhouse (20 samples, 0.97%)</title><rect width="18.3" height="15" x="87.8" y="277" fill="#E93C10" rx="2" ry="2"/></g><g><title>memcpy#/usr/bin/clickhouse (28 samples, 1.36%)</title><rect width="25.6" height="15" x="1830.5" y="85" fill="#DF8D1B" rx="2" ry="2"/><text x="1833.51" y="95.5">m..</text></g><g><title>all (2,054 samples, 100%)</title><rect width="1880" height="15" x="10" y="533" fill="#F42805" rx="2" ry="2"/></g><g><title>DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt; const&amp;, std::__1::shared_ptr&lt;DB::IDataType const&gt; const&amp;, unsigned long) const#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="10.9" y="357" fill="#D14226" rx="2" ry="2"/></g><g><title>DB::ColumnString::~ColumnString()#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width="1" height="15" x="54.8" y="309" fill="#F86205" rx="2" ry="2"/></g><g><title>DB::MergeTreeRangeReader::read(unsigned long, std::__1::deque&lt;DB::MarkRange, std::__1::allocator&lt;DB::MarkRange&gt; &gt;&amp;)#/usr/bin/clickhouse (2 samples, 0.10%)</title><rect width="1.9" height="15" x="1856.1" y="277" fill="#E9A52B" rx="2" ry="2"/></g><g><title>CityHash_v1_0_2::CityHash128(char const*, unsigned long)#/usr/bin/clickhouse (2 samples, 0.10%)</title><rect width="1.8" height="15" x="1781.1" y="117" fill="#F58232" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width="1" height="15" x="54.8" y="245" fill="#E22D0D" rx="2" ry="2"/></g><g><title>DB::JSONExtractRawImpl&lt;DB::SimdJSONParser&gt;::traverse(DB::SimdJSONParser::Element const&amp;, DB::WriteBuffer&amp;)#/usr/bin/clickhouse (2 samples, 0.10%)</title><rect width="1.8" height="15" x="122.6" y="229" fill="#F4D524" rx="2" ry="2"/></g><g><title>DB::ISource::tryGenerate()#/usr/bin/clickhouse (146 samples, 7.11%)</title><rect width="133.7" height="15" x="1724.3" y="357" fill="#F5502D" rx="2" ry="2"/><text x="1727.33" y="367.5">DB::ISource::try..</text></g><g><title>DB::ColumnString::replicate(DB::PODArray&lt;unsigned long, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt; const&amp;) const#/usr/bin/clickhouse (111 samples, 5.40%)</title><rect width="101.6" height="15" x="1621.8" y="325" fill="#FD611A" rx="2" ry="2"/><text x="1624.82" y="335.5">DB::ColumnSt..</text></g><g><title>DB::AggregatedDataVariants::convertToTwoLevel()#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="45.7" y="357" fill="#E4A503" rx="2" ry="2"/></g><g><title># (1 samples, 0.05%)</title><rect width=".9" height="15" x="1860.7" y="389" fill="#E45E08" rx="2" ry="2"/></g><g><title>memcpy#/usr/bin/clickhouse (3 samples, 0.15%)</title><rect width="2.8" height="15" x="743.1" y="197" fill="#D4061F" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1,980 samples, 96.40%)</title><rect width="1812.3" height="15" x="45.7" y="405" fill="#F6B12B" rx="2" ry="2"/><text x="48.7" y="415.5">#/usr/bin/clickhouse</text></g><g><title>re2_st::Prog::Optimize()#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="10.9" y="197" fill="#DA8F05" rx="2" ry="2"/></g><g><title>tcache_bin_flush_small#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="10.9" y="133" fill="#F5A336" rx="2" ry="2"/></g><g><title>arena_ralloc#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1719.8" y="277" fill="#FD7502" rx="2" ry="2"/></g><g><title>DB::IExecutableFunction::execute(std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt; const&amp;, std::__1::shared_ptr&lt;DB::IDataType const&gt; const&amp;, unsigned long, bool) const#/usr/bin/clickhouse (1,703 samples, 82.91%)</title><rect width="1558.7" height="15" x="56.7" y="325" fill="#F2E32A" rx="2" ry="2"/><text x="59.68" y="335.5">DB::IExecutableFunction::execute(std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt; const&amp;, std::__1::shared_ptr&lt;DB::IDataType const&gt; const&amp;, unsigned long, bool) const#/usr/bi..</text></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="46.6" y="229" fill="#D28D22" rx="2" ry="2"/></g><g><title>HashTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, DB::RowRefList, DefaultHash&lt;StringRef, void&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef, void&gt;, HashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt; &gt;::resize(unsigned long, unsigned long)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="51.2" y="341" fill="#D43D16" rx="2" ry="2"/></g><g><title>DB::QueryProfilerReal::signalHandler(int, siginfo_t*, void*)#/usr/bin/clickhouse (6 samples, 0.29%)</title><rect width="5.5" height="15" x="1882.7" y="325" fill="#FA5309" rx="2" ry="2"/></g><g><title>__madvise#/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.05%)</title><rect width=".9" height="15" x="374.3" y="117" fill="#FD470B" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="374.3" y="165" fill="#D6CA15" rx="2" ry="2"/></g><g><title>DB::IParserBase::parse(DB::IParser::Pos&amp;, std::__1::shared_ptr&lt;DB::IAST&gt;&amp;, DB::Expected&amp;)#/usr/bin/clickhouse (3 samples, 0.15%)</title><rect width="2.8" height="15" x="1879.9" y="309" fill="#E38413" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1396.7" y="197" fill="#D19628" rx="2" ry="2"/></g><g><title>DB::FunctionsLogicalDetail::FunctionAnyArityLogical&lt;DB::FunctionsLogicalDetail::OrImpl, DB::NameOr&gt;::executeImpl(std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt; const&amp;, std::__1::shared_ptr&lt;DB::IDataType const&gt; const&amp;, unsigned long) const#/usr/bin/clickhouse (5 samples, 0.24%)</title><rect width="4.6" height="15" x="1397.6" y="277" fill="#D8A11D" rx="2" ry="2"/></g><g><title>DB::ColumnString::insertDefault()#/usr/bin/clickhouse (2 samples, 0.10%)</title><rect width="1.9" height="15" x="120.7" y="245" fill="#EBC726" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="374.3" y="197" fill="#E8CC11" rx="2" ry="2"/></g><g><title>MemoryTracker::alloc(long)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1612.7" y="229" fill="#DC062C" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (45 samples, 2.19%)</title><rect width="41.2" height="15" x="1787.5" y="101" fill="#E85F32" rx="2" ry="2"/><text x="1790.49" y="111.5">#/u..</text></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1614.5" y="165" fill="#E82035" rx="2" ry="2"/></g><g><title>#/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.05%)</title><rect width=".9" height="15" x="742.2" y="197" fill="#D9D623" rx="2" ry="2"/></g><g><title>arena_extent_alloc_large#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1404.9" y="197" fill="#E92103" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="10.9" y="421" fill="#D93414" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1873.5" y="453" fill="#DE452B" rx="2" ry="2"/></g><g><title>DB::ParserDataType::parseImpl(DB::IParser::Pos&amp;, std::__1::shared_ptr&lt;DB::IAST&gt;&amp;, DB::Expected&amp;)#/usr/bin/clickhouse (3 samples, 0.15%)</title><rect width="2.8" height="15" x="1879.9" y="325" fill="#D8A10B" rx="2" ry="2"/></g><g><title>Allocator&lt;true, true&gt;::allocNoTrack(unsigned long, unsigned long)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="46.6" y="309" fill="#EB182D" rx="2" ry="2"/></g><g><title>extent_dalloc_wrapper#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1396.7" y="149" fill="#DF0A2D" rx="2" ry="2"/></g><g><title>malloc_default#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="10.9" y="165" fill="#D33501" rx="2" ry="2"/></g><g><title># (1 samples, 0.05%)</title><rect width=".9" height="15" x="1878.1" y="357" fill="#DD7606" rx="2" ry="2"/></g><g><title>Allocator&lt;false, false&gt;::free(void*, unsigned long)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1396.7" y="245" fill="#ED531B" rx="2" ry="2"/></g><g><title>DB::Field::~Field()#/usr/bin/clickhouse (3 samples, 0.15%)</title><rect width="2.8" height="15" x="42" y="501" fill="#ECA434" rx="2" ry="2"/></g><g><title>DB::ColumnVector&lt;StrongTypedef&lt;wide::integer&lt;128ul, unsigned int&gt;, DB::UUIDTag&gt; &gt;::insertFrom(DB::IColumn const&amp;, unsigned long)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1620" y="309" fill="#E7531D" rx="2" ry="2"/></g><g><title>bool re2_st::DFA::InlinedSearchLoop&lt;true, false, true&gt;(re2_st::DFA::SearchParams*)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width="1" height="15" x="84.1" y="181" fill="#CD6D16" rx="2" ry="2"/></g><g><title>Allocator&lt;false, false&gt;::realloc(void*, unsigned long, unsigned long, unsigned long)#/usr/bin/clickhouse (28 samples, 1.36%)</title><rect width="25.6" height="15" x="1830.5" y="149" fill="#DC880D" rx="2" ry="2"/><text x="1833.51" y="159.5">A..</text></g><g><title>DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const#/usr/bin/clickhouse (11 samples, 0.54%)</title><rect width="10.1" height="15" x="1771" y="149" fill="#E68906" rx="2" ry="2"/></g><g><title>DB::MergeTreeBaseSelectProcessor::generate()#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1873.5" y="357" fill="#D30D20" rx="2" ry="2"/></g><g><title>DB::MergeTreeBaseSelectProcessor::generate()#/usr/bin/clickhouse (146 samples, 7.11%)</title><rect width="133.7" height="15" x="1724.3" y="341" fill="#D36E03" rx="2" ry="2"/><text x="1727.33" y="351.5">DB::MergeTreeBas..</text></g><g><title>DB::MergeTreeReaderWide::readRows(unsigned long, bool, unsigned long, std::__1::vector&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt;, std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; &gt; &gt;&amp;)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1873.5" y="261" fill="#F3920C" rx="2" ry="2"/></g><g><title>void DB::PODArrayBase&lt;8ul, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt;::resize&lt;&gt;(unsigned long)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="86.9" y="245" fill="#EA2200" rx="2" ry="2"/></g><g><title>DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt; const&amp;, std::__1::shared_ptr&lt;DB::IDataType const&gt; const&amp;, unsigned long, bool) const#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width="1" height="15" x="1857" y="197" fill="#EB2621" rx="2" ry="2"/></g><g><title>DB::ColumnConst::ColumnConst(COW&lt;DB::IColumn&gt;::immutable_ptr&lt;DB::IColumn&gt; const&amp;, unsigned long)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="55.8" y="309" fill="#E9B60F" rx="2" ry="2"/></g><g><title>void boost::context::detail::fiber_entry&lt;boost::context::detail::fiber_record&lt;boost::context::fiber, FiberStack&amp;, DB::RemoteQueryExecutorRoutine&gt; &gt;(boost::context::detail::transfer_t)#/usr/bin/clickhouse (12 samples, 0.58%)</title><rect width="11" height="15" x="1878.1" y="501" fill="#F36B2E" rx="2" ry="2"/></g><g><title>DB::VolnitskyBase&lt;true, true, DB::StringSearcher&lt;true, true&gt; &gt;::VolnitskyBase(char const*, unsigned long, unsigned long)#/usr/bin/clickhouse (2 samples, 0.10%)</title><rect width="1.9" height="15" x="1406.7" y="245" fill="#D5E105" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="374.3" y="181" fill="#FAD71B" rx="2" ry="2"/></g><g><title>auto DB::Field::dispatch&lt;auto auto DB::applyVisitor&lt;DB::FieldVisitorAccurateEquals, DB::Field&amp;, DB::Field const&amp;&gt;(DB::FieldVisitorAccurateEquals&amp;&amp;, DB::Field&amp;, DB::Field const&amp;)::&apos;lambda&apos;(DB::FieldVisitorAccurateEquals&amp;)::operator()&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;(DB::FieldVisitorAccurateEquals&amp;) const::&apos;lambda&apos;(DB::FieldVisitorAccurateEquals&amp;), DB::Field const&amp;&gt;(DB::FieldVisitorAccurateEquals&amp;&amp;, DB::Field&amp;)#/usr/bin/clickhouse (2 samples, 0.10%)</title><rect width="1.8" height="15" x="1858" y="501" fill="#CDC100" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width="1" height="15" x="54.8" y="197" fill="#D2181A" rx="2" ry="2"/></g><g><title>malloc_default#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="86" y="149" fill="#F6B331" rx="2" ry="2"/></g><g><title>CurrentMemoryTracker::alloc(long)#/usr/bin/clickhouse (3 samples, 0.15%)</title><rect width="2.8" height="15" x="1879.9" y="213" fill="#F25A2A" rx="2" ry="2"/></g><g><title>void DB::Aggregator::convertToBlockImpl&lt;DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef, void&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef, void&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt;, HashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef, void&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef, void&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt; &gt; &gt;(DB::AggregationMethodSerialized&lt;TwoLevelHashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef, void&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef, void&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt;, HashMapTable&gt; &gt;&amp;, HashMapTable&lt;StringRef, HashMapCellWithSavedHash&lt;StringRef, char*, DefaultHash&lt;StringRef, void&gt;, HashTableNoState&gt;, DefaultHash&lt;StringRef, void&gt;, TwoLevelHashTableGrower&lt;8ul&gt;, Allocator&lt;true, true&gt; &gt;&amp;, std::__1::vector&lt;COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt;, std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt; &gt; &gt;&amp;, std::__1::vector&lt;DB::PODArray&lt;char*, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt;*, std::__1::allocator&lt;DB::PODArray&lt;char*, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt;*&gt; &gt;&amp;, std::__1::vector&lt;COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt;, std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt; &gt; &gt;&amp;, DB::Arena*, bool) const#/usr/bin/clickhouse (4 samples, 0.19%)</title><rect width="3.7" height="15" x="1615.4" y="309" fill="#ECAF2F" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (2 samples, 0.10%)</title><rect width="1.9" height="15" x="1394.8" y="245" fill="#CF6E0A" rx="2" ry="2"/></g><g><title>DB::FunctionDateOrDateTimeToSomething&lt;DB::DataTypeDateTime, DB::ToStartOfDayImpl&gt;::executeImpl(std::__1::vector&lt;DB::ColumnWithTypeAndName, std::__1::allocator&lt;DB::ColumnWithTypeAndName&gt; &gt; const&amp;, std::__1::shared_ptr&lt;DB::IDataType const&gt; const&amp;, unsigned long) const#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width="1" height="15" x="1857" y="165" fill="#E0A536" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width="1" height="15" x="54.8" y="229" fill="#E0C502" rx="2" ry="2"/></g><g><title>bool re2_st::DFA::InlinedSearchLoop&lt;false, false, true&gt;(re2_st::DFA::SearchParams*)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="83.2" y="181" fill="#CD6309" rx="2" ry="2"/></g><g><title>pthread_mutex_trylock#/usr/lib/x86_64-linux-gnu/libpthread-2.31.so (1 samples, 0.05%)</title><rect width=".9" height="15" x="205" y="149" fill="#DB4A1B" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="49.4" y="197" fill="#DD962D" rx="2" ry="2"/></g><g><title>void std::__1::allocator_traits&lt;AllocatorWithMemoryTracking&lt;DB::Field&gt; &gt;::__destroy&lt;DB::Field&gt;(std::__1::integral_constant&lt;bool, false&gt;, AllocatorWithMemoryTracking&lt;DB::Field&gt;&amp;, DB::Field*)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1889.1" y="501" fill="#E53F28" rx="2" ry="2"/></g><g><title>Allocator&lt;true, true&gt;::realloc(void*, unsigned long, unsigned long, unsigned long)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="49.4" y="293" fill="#ED4D25" rx="2" ry="2"/></g><g><title>DB::ISource::tryGenerate()#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1873.5" y="373" fill="#F72633" rx="2" ry="2"/></g><g><title>#/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.10%)</title><rect width="1.9" height="15" x="1406.7" y="229" fill="#D7E41A" rx="2" ry="2"/></g><g><title>simdjson::haswell::dom_parser_implementation::stage2(simdjson::dom::document&amp;)#/usr/bin/clickhouse (8 samples, 0.39%)</title><rect width="7.3" height="15" x="1866.2" y="501" fill="#E33E0C" rx="2" ry="2"/></g><g><title>re2_st::RE2::RE2(re2_st::StringPiece const&amp;, re2_st::RE2::Options const&amp;)#/usr/bin/clickhouse (2 samples, 0.10%)</title><rect width="1.8" height="15" x="85.1" y="245" fill="#E4240B" rx="2" ry="2"/></g><g><title>DB::ReplaceRegexpImpl&lt;false&gt;::vector(DB::PODArray&lt;char8_t, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt; const&amp;, DB::PODArray&lt;unsigned long, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, DB::PODArray&lt;char8_t, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt;&amp;, DB::PODArray&lt;unsigned long, 4096ul, Allocator&lt;false, false&gt;, 15ul, 16ul&gt;&amp;)#/usr/bin/clickhouse (33 samples, 1.61%)</title><rect width="30.2" height="15" x="57.6" y="261" fill="#FAC52C" rx="2" ry="2"/><text x="60.59" y="271.5">DB..</text></g><g><title>__libc_calloc#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="45.7" y="309" fill="#EA3433" rx="2" ry="2"/></g><g><title># (1 samples, 0.05%)</title><rect width=".9" height="15" x="1873.5" y="53" fill="#FBB831" rx="2" ry="2"/></g><g><title>ThreadPoolImpl&lt;std::__1::thread&gt;::worker(std::__1::__list_iterator&lt;std::__1::thread, void*&gt;)#/usr/bin/clickhouse (1,980 samples, 96.40%)</title><rect width="1812.3" height="15" x="45.7" y="453" fill="#FC320F" rx="2" ry="2"/><text x="48.7" y="463.5">ThreadPoolImpl&lt;std::__1::thread&gt;::worker(std::__1::__list_iterator&lt;std::__1::thread, void*&gt;)#/usr/bin/clickhouse</text></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="10.9" y="501" fill="#E20F2F" rx="2" ry="2"/></g><g><title>DB::ColumnString::operator[](unsigned long) const#/usr/bin/clickhouse (2 samples, 0.10%)</title><rect width="1.9" height="15" x="101.5" y="229" fill="#EDB002" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="375.2" y="149" fill="#FE2E13" rx="2" ry="2"/></g><g><title>arena_tcache_fill_small#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1614.5" y="229" fill="#DC2B2F" rx="2" ry="2"/></g><g><title>memcpy#/usr/bin/clickhouse (179 samples, 8.71%)</title><rect width="163.9" height="15" x="209.5" y="229" fill="#EE6800" rx="2" ry="2"/><text x="212.53" y="239.5">memcpy#/usr/bin/click..</text></g><g><title># (1 samples, 0.05%)</title><rect width=".9" height="15" x="1860.7" y="405" fill="#D5211A" rx="2" ry="2"/></g><g><title>DB::AggregatingTransform::consume(DB::Chunk)#/usr/bin/clickhouse (4 samples, 0.19%)</title><rect width="3.7" height="15" x="46.6" y="373" fill="#FA1427" rx="2" ry="2"/></g><g><title>memcpy#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1719.8" y="245" fill="#FDE036" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="46.6" y="197" fill="#F2780D" rx="2" ry="2"/></g><g><title>large_dalloc#/usr/bin/clickhouse (2 samples, 0.10%)</title><rect width="1.9" height="15" x="204" y="245" fill="#F00D08" rx="2" ry="2"/></g><g><title># (1 samples, 0.05%)</title><rect width=".9" height="15" x="1878.1" y="421" fill="#DA560F" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1614.5" y="197" fill="#ED600B" rx="2" ry="2"/></g><g><title>operator new(unsigned long)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1614.5" y="277" fill="#EE6A30" rx="2" ry="2"/></g><g><title>DB::ExpressionActions::execute(DB::Block&amp;, unsigned long&amp;, bool) const#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="10.9" y="405" fill="#F5BE1E" rx="2" ry="2"/></g><g><title>re2_st::DFA::Search(re2_st::StringPiece const&amp;, re2_st::StringPiece const&amp;, bool, bool, bool, bool*, char const**, re2_st::SparseSetT&lt;void&gt;*)#/usr/bin/clickhouse (7 samples, 0.34%)</title><rect width="6.5" height="15" x="78.6" y="197" fill="#E8DF21" rx="2" ry="2"/></g><g><title>simdjson::haswell::dom_parser_implementation::parse(unsigned char const*, unsigned long, simdjson::dom::document&amp;)#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="1863.5" y="501" fill="#FE7535" rx="2" ry="2"/></g><g><title>#/usr/bin/clickhouse (1 samples, 0.05%)</title><rect width=".9" height="15" x="208.6" y="149" fill="#CD7900" rx="2" ry="2"/></g></g></svg>